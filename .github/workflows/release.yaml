name: 'C++ CI'

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Install dependencies
      - run: sudo apt-get update
      - run: sudo apt-get install -y build-essential wget
      - run: sudo apt-get install libboost-program-options-dev libboost-system-dev libboost-filesystem-dev -y
      - run: sudo apt-get install nlohmann-json3-dev -y
      - run: sudo apt-get install libyaml-cpp-dev -y
      - run: sudo apt-get install libboost-all-dev -y
      - run: sudo apt-get install libssl-dev -y

      # Download and build libxml2 from source
      - run: wget https://download.gnome.org/sources/libxml2/2.13/libxml2-2.13.6.tar.xz
      - run: sudo mkdir -p /usr/libxml2-2.13.6
      - run: sudo tar -xf libxml2-2.13.6.tar.xz -C /usr/libxml2-2.13.6 --strip-components=1
      - run: |
          cd /usr/libxml2-2.13.6
          ./configure --prefix=/usr/libxml2-2.13.6 --enable-static --disable-shared
          make
          sudo make install
      

      # Create build directory
      - run: mkdir -p build

      # Run cmake to configure the build, enabling static libraries for YAML and libxml2
      - run: cmake -B build -S . -DPATCH_VERSION=${{ github.run_number }} -DWITH_BOOST_TEST=ON -DYAML_CPP_STATIC=ON -DCMAKE_STATIC_LIBS=ON

      # Build the project
      - run: cmake --build build

      # Run tests
      - run: ctest --test-dir build --output-on-failure

      # Build the package
      - run: cmake --build build --target package

      # List the generated packages
      - run: ls -lh build/*.deb

      # Upload the build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/

      # Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.MY_ACCESS_TOKEN }}

      # Upload the release asset
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/validator-0.0.${{ github.run_number }}-Linux.deb
          asset_name: validator-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
