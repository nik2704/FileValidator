name: 'C++ CI'

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libboost-dev \
            libboost-program-options-dev \
            libboost-system-dev \
            libboost-filesystem-dev \
            nlohmann-json3-dev \
            libtinyxml2-dev \
            libxml2-dev \
            libyaml-cpp-dev \
            zlib1g-dev

      - name: Build static Zlib
        run: |
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xvf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          ./configure --static
          make -j$(nproc)
          sudo make install

      - name: Build static LibXML2
        run: |
          wget ftp://xmlsoft.org/libxml2/libxml2-2.9.12.tar.gz
          tar -xvf libxml2-2.9.12.tar.gz
          cd libxml2-2.9.12
          ./configure --disable-shared --enable-static --with-zlib --with-lzma --with-python=no
          make -j$(nproc)
          sudo make install

      - name: Create build directory
        run: mkdir -p build

      - name: Configure CMake
        run: |
          cmake -B build -S . \
            -DPATCH_VERSION=${{ github.run_number }} \
            -DWITH_BOOST_TEST=ON \
            -DBUILD_SHARED_LIBS=OFF \
            -DBoost_USE_STATIC_LIBS=ON \
            -DOPENSSL_USE_STATIC_LIBS=TRUE \
            -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -lxml2 -lz -llzma"

      - name: Build project
        run: cmake --build build

      - name: Run tests
        run: ctest --test-dir build --output-on-failure

      - name: Build package
        run: cmake --build build --target package

      - name: List build artifacts
        run: ls -lh build/*.deb

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/validator-0.0.${{ github.run_number }}-Linux.deb
          asset_name: validator-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package